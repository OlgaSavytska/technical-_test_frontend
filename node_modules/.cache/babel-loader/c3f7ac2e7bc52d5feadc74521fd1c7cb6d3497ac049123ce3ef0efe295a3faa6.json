{"ast":null,"code":"var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    staticClass: \"quiz-body\"\n  }, [_c(\"div\", {\n    staticClass: \"quiz-body__carts\"\n  }, _vm._l(_vm.questions, function (question) {\n    return _c(\"div\", {\n      key: question.id,\n      staticClass: \"quiz-body__cart\"\n    }, [_vm._v(\" \" + _vm._s(question.title) + \" \"), _c(\"div\", {\n      staticClass: \"quiz-body__answers\"\n    }, _vm._l(question.answers, function (answer, index) {\n      return _c(\"div\", {\n        key: index,\n        staticClass: \"quiz-body__answer\"\n      }, [_c(\"vs-checkbox-container\", {\n        attrs: {\n          answer: answer\n        }\n      }), _c(\"vs-checkbox\", {\n        attrs: {\n          dark: \"\"\n        },\n        scopedSlots: _vm._u([true ? {\n          key: \"icon\",\n          fn: function () {\n            return [_c(\"i\", {\n              staticClass: \"bx bx-check\"\n            }), _c(\"box-icon\", {\n              attrs: {\n                name: \"check\",\n                color: \"white\"\n              }\n            })];\n          },\n          proxy: true\n        } : null], null, true),\n        model: {\n          value: answer.isChecked,\n          callback: function ($$v) {\n            _vm.$set(answer, \"isChecked\", $$v);\n          },\n          expression: \"answer.isChecked\"\n        }\n      }, [_vm._v(\" yyy \")])], 1);\n    }), 0)]);\n  }), 0)]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\nexport { render, staticRenderFns };","map":{"version":3,"names":["render","_vm","_c","_self","staticClass","_l","questions","question","key","id","_v","_s","title","answers","answer","index","attrs","dark","scopedSlots","_u","fn","name","color","proxy","model","value","isChecked","callback","$$v","$set","expression","staticRenderFns","_withStripped"],"sources":["/Users/olga/Desktop/test1/src/components/QuizPageComponents/QuizBody.vue"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", { staticClass: \"quiz-body\" }, [\n    _c(\n      \"div\",\n      { staticClass: \"quiz-body__carts\" },\n      _vm._l(_vm.questions, function (question) {\n        return _c(\"div\", { key: question.id, staticClass: \"quiz-body__cart\" }, [\n          _vm._v(\" \" + _vm._s(question.title) + \" \"),\n          _c(\n            \"div\",\n            { staticClass: \"quiz-body__answers\" },\n            _vm._l(question.answers, function (answer, index) {\n              return _c(\n                \"div\",\n                { key: index, staticClass: \"quiz-body__answer\" },\n                [\n                  _c(\"vs-checkbox-container\", { attrs: { answer: answer } }),\n                  _c(\n                    \"vs-checkbox\",\n                    {\n                      attrs: { dark: \"\" },\n                      scopedSlots: _vm._u(\n                        [\n                          true\n                            ? {\n                                key: \"icon\",\n                                fn: function () {\n                                  return [\n                                    _c(\"i\", { staticClass: \"bx bx-check\" }),\n                                    _c(\"box-icon\", {\n                                      attrs: { name: \"check\", color: \"white\" },\n                                    }),\n                                  ]\n                                },\n                                proxy: true,\n                              }\n                            : null,\n                        ],\n                        null,\n                        true\n                      ),\n                      model: {\n                        value: answer.isChecked,\n                        callback: function ($$v) {\n                          _vm.$set(answer, \"isChecked\", $$v)\n                        },\n                        expression: \"answer.isChecked\",\n                      },\n                    },\n                    [_vm._v(\" yyy \")]\n                  ),\n                ],\n                1\n              )\n            }),\n            0\n          ),\n        ])\n      }),\n      0\n    ),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"mappings":"AAAA,IAAIA,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;EAC7B,IAAIC,GAAG,GAAG,IAAI;IACZC,EAAE,GAAGD,GAAG,CAACE,KAAK,CAACD,EAAE;EACnB,OAAOA,EAAE,CAAC,KAAK,EAAE;IAAEE,WAAW,EAAE;EAAY,CAAC,EAAE,CAC7CF,EAAE,CACA,KAAK,EACL;IAAEE,WAAW,EAAE;EAAmB,CAAC,EACnCH,GAAG,CAACI,EAAE,CAACJ,GAAG,CAACK,SAAS,EAAE,UAAUC,QAAQ,EAAE;IACxC,OAAOL,EAAE,CAAC,KAAK,EAAE;MAAEM,GAAG,EAAED,QAAQ,CAACE,EAAE;MAAEL,WAAW,EAAE;IAAkB,CAAC,EAAE,CACrEH,GAAG,CAACS,EAAE,CAAC,GAAG,GAAGT,GAAG,CAACU,EAAE,CAACJ,QAAQ,CAACK,KAAK,CAAC,GAAG,GAAG,CAAC,EAC1CV,EAAE,CACA,KAAK,EACL;MAAEE,WAAW,EAAE;IAAqB,CAAC,EACrCH,GAAG,CAACI,EAAE,CAACE,QAAQ,CAACM,OAAO,EAAE,UAAUC,MAAM,EAAEC,KAAK,EAAE;MAChD,OAAOb,EAAE,CACP,KAAK,EACL;QAAEM,GAAG,EAAEO,KAAK;QAAEX,WAAW,EAAE;MAAoB,CAAC,EAChD,CACEF,EAAE,CAAC,uBAAuB,EAAE;QAAEc,KAAK,EAAE;UAAEF,MAAM,EAAEA;QAAO;MAAE,CAAC,CAAC,EAC1DZ,EAAE,CACA,aAAa,EACb;QACEc,KAAK,EAAE;UAAEC,IAAI,EAAE;QAAG,CAAC;QACnBC,WAAW,EAAEjB,GAAG,CAACkB,EAAE,CACjB,CACE,IAAI,GACA;UACEX,GAAG,EAAE,MAAM;UACXY,EAAE,EAAE,SAAAA,CAAA,EAAY;YACd,OAAO,CACLlB,EAAE,CAAC,GAAG,EAAE;cAAEE,WAAW,EAAE;YAAc,CAAC,CAAC,EACvCF,EAAE,CAAC,UAAU,EAAE;cACbc,KAAK,EAAE;gBAAEK,IAAI,EAAE,OAAO;gBAAEC,KAAK,EAAE;cAAQ;YACzC,CAAC,CAAC,CACH;UACH,CAAC;UACDC,KAAK,EAAE;QACT,CAAC,GACD,IAAI,CACT,EACD,IAAI,EACJ,IACF,CAAC;QACDC,KAAK,EAAE;UACLC,KAAK,EAAEX,MAAM,CAACY,SAAS;UACvBC,QAAQ,EAAE,SAAAA,CAAUC,GAAG,EAAE;YACvB3B,GAAG,CAAC4B,IAAI,CAACf,MAAM,EAAE,WAAW,EAAEc,GAAG,CAAC;UACpC,CAAC;UACDE,UAAU,EAAE;QACd;MACF,CAAC,EACD,CAAC7B,GAAG,CAACS,EAAE,CAAC,OAAO,CAAC,CAClB,CAAC,CACF,EACD,CACF,CAAC;IACH,CAAC,CAAC,EACF,CACF,CAAC,CACF,CAAC;EACJ,CAAC,CAAC,EACF,CACF,CAAC,CACF,CAAC;AACJ,CAAC;AACD,IAAIqB,eAAe,GAAG,EAAE;AACxB/B,MAAM,CAACgC,aAAa,GAAG,IAAI;AAE3B,SAAShC,MAAM,EAAE+B,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}