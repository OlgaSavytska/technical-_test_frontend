{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import BondRound from '../assets/svgVue/BondRound.vue'\n// import StartWave from '../assets/svgVue/StartWave.vue'\n// import QuizBoat from '../assets/svgVue/QuizBoat.vue'\n// import QuizOctopus from \"../assets/svgVue/QuizOctopus.vue\"\n\nimport * as THREE from 'three';\nexport default {\n  name: \"StartPage\",\n  components: {\n    // BondRound,\n    // QuizBoat,\n    // StartWave,\n    // QuizOctopus\n  },\n  data() {\n    return {\n      openQuiz: false,\n      scene: null,\n      camera: null,\n      renderer: null,\n      squares: []\n    };\n  },\n  // mounted(){\n  //     this.scene = new THREE.Scene();\n  // this.camera = new THREE.PerspectiveCamera(75, this.$el.offsetWidth / this.$el.offsetHeight, 0.1, 1000);\n  // this.renderer = new THREE.WebGLRenderer();\n  // this.renderer.setSize(this.$el.offsetWidth, this.$el.offsetHeight);\n  // this.$refs.scene.appendChild(this.renderer.domElement);\n\n  // // Створення квадратів\n  // const squareCount = 100;\n  // for (let i = 0; i < squareCount; i++) {\n  //   const size = Math.random() * 2 + 1;\n  //   const geometry = new THREE.BoxGeometry(size, size, size);\n  //   const material = new THREE.MeshBasicMaterial({ color: new THREE.Color(Math.random(), Math.random(), Math.random()) });\n  //   const square = new THREE.Mesh(geometry, material);\n  //   square.position.set(\n  //     (Math.random() - 0.5) * 20,\n  //     Math.random() * 10,\n  //     (Math.random() - 0.5) * 20\n  //   );\n  //   this.squares.push(square);\n  //   this.scene.add(square);\n  // }\n\n  // // Камера\n  // this.camera.position.z = 5;\n\n  // // Оновлення кадру\n  // const animate = () => {\n  //   requestAnimationFrame(animate);\n\n  //   // Рух квадратів вниз\n  //   this.squares.forEach(square => {\n  //     square.position.y -= 0.01;\n  //     if (square.position.y < -5) {\n  //       square.position.y = 10;\n  //     }\n  //   });\n\n  //   this.renderer.render(this.scene, this.camera);\n  // };\n\n  // // Обробник зміни розміру вікна\n  // window.addEventListener('resize', () => {\n  //   this.camera.aspect = this.$el.offsetWidth / this.$el.offsetHeight;\n  //   this.camera.updateProjectionMatrix();\n  //   this.renderer.setSize(this.$el.offsetWidth, this.$el.offsetHeight);\n  // });\n\n  // // Запуск анімації\n  // animate();\n\n  // },\n\n  // methods:{\n  //     startQuiz(){\n  //         this.openQuiz = true\n  //     }\n  // }\n\n  mounted() {\n    this.initScene();\n    this.initBackground();\n    this.initFallingSquares();\n    this.animate();\n    window.addEventListener('resize', this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(this.renderer.domElement);\n      this.camera.position.z = 0.8;\n    },\n    initBackground() {\n      const backgroundColor = new THREE.Color(0xF3F6F4);\n      const backgroundGeometry = new THREE.PlaneGeometry(1000, 1000);\n      const backgroundMaterial = new THREE.MeshBasicMaterial({\n        color: backgroundColor,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.3\n      });\n      const backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n      this.scene.add(backgroundPlane);\n    },\n    initFallingSquares() {\n      const squareCount = 13;\n      for (let i = 0; i < squareCount; i++) {\n        const size = Math.random() * 2 + 1;\n        const geometry = new THREE.PlaneGeometry(size, size);\n        const material = new THREE.MeshBasicMaterial({\n          color: new THREE.Color(Math.random(), Math.random(), Math.random())\n        });\n        const square = new THREE.Mesh(geometry, material);\n        square.position.set((Math.random() - 0.5) * 20, Math.random() * 10, (Math.random() - 0.5) * 20);\n        if (Math.abs(square.position.z) < 2) {\n          continue;\n        }\n        this.squares.push(square);\n        this.scene.add(square);\n      }\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      this.squares.forEach(square => {\n        square.position.y -= 0.01;\n        if (square.position.y < -5) {\n          square.position.y = 10;\n        }\n      });\n      this.renderer.render(this.scene, this.camera);\n    },\n    handleResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","components","data","openQuiz","scene","camera","renderer","squares","mounted","initScene","initBackground","initFallingSquares","animate","window","addEventListener","handleResize","beforeDestroy","removeEventListener","methods","Scene","PerspectiveCamera","innerWidth","innerHeight","WebGLRenderer","setSize","document","body","appendChild","domElement","position","z","backgroundColor","Color","backgroundGeometry","PlaneGeometry","backgroundMaterial","MeshBasicMaterial","color","side","DoubleSide","transparent","opacity","backgroundPlane","Mesh","add","squareCount","i","size","Math","random","geometry","material","square","set","abs","push","requestAnimationFrame","forEach","y","render","aspect","updateProjectionMatrix"],"sources":["src/components/StartPage.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"start-page__header-top\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" width=\"100\" height=\"100\">\n  <!-- Вертикальна частина букви \"Г\" -->\n  <rect x=\"40\" y=\"0\" width=\"20\" height=\"100\" fill=\"red\" />\n\n  <!-- Горизонтальна частина букви \"Г\" -->\n  <rect x=\"0\" y=\"80\" width=\"60\" height=\"20\" fill=\"red\" />\n</svg>\n\n<div ref=\"scene\"></div>\n\n\n\n            <!-- <BondRound/> -->\n\n            <!-- <div class=\"start-page__round\">\n                <div class=\"start-page__btn-container\" :class=\"{'start-quiz': openQuiz}\" @click=\"startQuiz\">\n                    <button class=\"start-page__btn\">\n                        \n                    </button>\n                    <span v-if=\"!openQuiz\">Start</span>\n                </div>\n            </div> -->\n\n            <!-- <div class=\"wave-container\">\n                <div class=\"wave\" id=\"wave1\" style=\"--i: 1;\">\n                    <StartWave/>\n                </div>\n\n                <div class=\"wave\" id=\"wave2\" style=\"--i: 2;\">\n                    <QuizBoat class=\"quiz-boat\"/>\n                    <QuizOctopus class=\"quiz-octopus\"/>\n                    \n                    <StartWave/>\n                </div>\n\n                <div class=\"wave\" id=\"wave3\" style=\"--i: 3;\">\n                    <StartWave/>\n                </div>\n\n                <div class=\"wave\" id=\"wave4\" style=\"--i: 4;\">\n                    <StartWave/>\n                </div>\n            </div> -->\n        </div>\n    </div>\n</template>\n\n<script>\n// import BondRound from '../assets/svgVue/BondRound.vue'\n// import StartWave from '../assets/svgVue/StartWave.vue'\n// import QuizBoat from '../assets/svgVue/QuizBoat.vue'\n// import QuizOctopus from \"../assets/svgVue/QuizOctopus.vue\"\n\nimport * as THREE from 'three';\nexport default{\n    name: \"StartPage\",\n\n    components: {\n        // BondRound,\n        // QuizBoat,\n        // StartWave,\n        // QuizOctopus\n    },\n\n    data(){\n        return{\n            openQuiz: false,\n            scene: null,\n            camera: null,\n            renderer: null,\n            squares: [],\n        }\n    },\n\n    // mounted(){\n    //     this.scene = new THREE.Scene();\n    // this.camera = new THREE.PerspectiveCamera(75, this.$el.offsetWidth / this.$el.offsetHeight, 0.1, 1000);\n    // this.renderer = new THREE.WebGLRenderer();\n    // this.renderer.setSize(this.$el.offsetWidth, this.$el.offsetHeight);\n    // this.$refs.scene.appendChild(this.renderer.domElement);\n\n    // // Створення квадратів\n    // const squareCount = 100;\n    // for (let i = 0; i < squareCount; i++) {\n    //   const size = Math.random() * 2 + 1;\n    //   const geometry = new THREE.BoxGeometry(size, size, size);\n    //   const material = new THREE.MeshBasicMaterial({ color: new THREE.Color(Math.random(), Math.random(), Math.random()) });\n    //   const square = new THREE.Mesh(geometry, material);\n    //   square.position.set(\n    //     (Math.random() - 0.5) * 20,\n    //     Math.random() * 10,\n    //     (Math.random() - 0.5) * 20\n    //   );\n    //   this.squares.push(square);\n    //   this.scene.add(square);\n    // }\n\n    // // Камера\n    // this.camera.position.z = 5;\n\n    // // Оновлення кадру\n    // const animate = () => {\n    //   requestAnimationFrame(animate);\n\n    //   // Рух квадратів вниз\n    //   this.squares.forEach(square => {\n    //     square.position.y -= 0.01;\n    //     if (square.position.y < -5) {\n    //       square.position.y = 10;\n    //     }\n    //   });\n\n    //   this.renderer.render(this.scene, this.camera);\n    // };\n\n    // // Обробник зміни розміру вікна\n    // window.addEventListener('resize', () => {\n    //   this.camera.aspect = this.$el.offsetWidth / this.$el.offsetHeight;\n    //   this.camera.updateProjectionMatrix();\n    //   this.renderer.setSize(this.$el.offsetWidth, this.$el.offsetHeight);\n    // });\n\n    // // Запуск анімації\n    // animate();\n\n    // },\n\n    // methods:{\n    //     startQuiz(){\n    //         this.openQuiz = true\n    //     }\n    // }\n\n    mounted() {\n    this.initScene();\n    this.initBackground();\n    this.initFallingSquares();\n    this.animate();\n    window.addEventListener('resize', this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(this.renderer.domElement);\n      this.camera.position.z = 0.8;\n    },\n    initBackground() {\n        const backgroundColor = new THREE.Color(0xF3F6F4);\n        const backgroundGeometry = new THREE.PlaneGeometry(1000, 1000);\n        const backgroundMaterial = new THREE.MeshBasicMaterial({ color: backgroundColor, side: THREE.DoubleSide, transparent: true, opacity: 0.3 });\n        const backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n        this.scene.add(backgroundPlane);\n    },\n    initFallingSquares() {\n      const squareCount = 13;\n      for (let i = 0; i < squareCount; i++) {\n        const size = Math.random() * 2 + 1;\n        const geometry = new THREE.PlaneGeometry(size, size);\n        const material = new THREE.MeshBasicMaterial({ color: new THREE.Color(Math.random(), Math.random(), Math.random()) });\n        const square = new THREE.Mesh(geometry, material);\n        \n        square.position.set(\n          (Math.random() - 0.5) * 20,\n          Math.random() * 10,\n          (Math.random() - 0.5) * 20\n        );\n        if (Math.abs(square.position.z) < 2) {\n          continue;\n        }\n\n        this.squares.push(square);\n        this.scene.add(square);\n      }\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n\n      this.squares.forEach(square => {\n        square.position.y -= 0.01;\n        if (square.position.y < -5) {\n          square.position.y = 10;\n        }\n      });\n\n      this.renderer.render(this.scene, this.camera);\n    },\n    handleResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n  },\n\n}\n</script>\n\n<style scoped lang=\"scss\">\n    .start-page{\n        &__header-top{\n            // background-image: url('../assets/png/cloudTop.png'); /* Замініть 'your-image.jpg' на шлях до вашого зображення */\n            // background-size: cover;\n            // background-attachment: fixed; /* Зафіксувати фон для ефекту паралакса */\n            // height: 100vh; /* Встановіть висоту відповідно до ваших потреб */\n            // position: relative;\n            // overflow: hidden;\n\n            // background-color: #47b0ca38;\n            // width: 100%;\n            // position: relative;\n            // height: 500px;\n            // z-index: -1;\n        }\n\n        &__btn{\n            width: 100%;\n            max-width: 300px;\n\n            border-radius: 50%;\n            background-color: transparent;\n            border-color: transparent;\n\n            transition: transform 0.5s ease;\n\n            &-container{\n                width: 100%;\n                max-width: 300px;\n\n                &:hover{\n                    .start-page__btn{\n                        transform: rotate(25deg) scale(1.2);\n                    }\n                }\n\n                &.start-quiz{\n                    transition: transform 10s ease;\n                    transform: rotate(105deg) scale(50);\n                }\n            }\n\n            // &:hover{\n            //     // max-width: 400px;\n                \n            //     // transform: rotate(25deg) scale(1.2);\n            // }\n\n            \n        }\n\n        &__round{\n            // position: relative;\n            width: 100%;\n\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            z-index: 1;\n\n            display: flex;\n            justify-content: center;\n            // color: #ffffff;\n\n            span{\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n\n                cursor: pointer;\n            }\n        }\n    }\n\n    .wave-container {\n        position: absolute;\n        // bottom: -220px;\n        // height: 100%;\n        width: 100%;\n        top: 500px;\n        \n\n        &:after{\n            content: \"\";\n            display: block;\n            margin: 0px;\n\n            width: 100%;\n            height: 7%;\n            background-color: #3498db;\n            position: absolute;\n            bottom: 0px;\n            z-index: 2;\n        }\n        // transform: rotate(-9deg);\n        // left: -2px;\n\n\n    //   position: absolute;\n    //   bottom: -150px;\n    //   height: 100%; /* 100% висота вікна браузера */\n    //   width: 100%;\n\n    //   overflow: hidden;\n    //   background-color: #3498db;\n    }\n\n    .wave {\n      position: absolute;\n      bottom: -6px;\n      width: 100%;\n      animation: animate 4s ease-in-out infinite;\n      animation-delay: calc(var(--i) * 0.55s);\n\n    .quiz-boat{\n        position: absolute;\n        bottom: 68px;\n        z-index: 7;\n    }\n\n    .quiz-octopus{\n        width: 100px;\n        position: absolute;\n        bottom: 122px;\n        z-index: 9;\n        left: 226px;\n    }\n\n        &#wave1{\n            z-index: 5;\n            opacity: 0.5;\n            background-position-x: 100px;\n            transform: rotate(-11deg);\n            // left: 40px;\n\n            \n        }\n\n        &#wave2{\n            z-index: 4;\n            opacity: 0.4;\n            background-position-x: 10px;\n            // transform: rotate(-11deg);\n            bottom: 30px;\n            // left: 40px;\n\n        }\n\n        &#wave3{\n            z-index: 3;\n            opacity: 0.3;\n            background-position-x: 100px;\n            transform: rotate(11deg);\n            bottom: 30px;\n            left: -40px;\n            width: 116%;\n        }\n\n        &#wave4{\n            z-index: 3;\n            opacity: 1.3;\n            background-position-x: 100px;\n        }\n    }\n\n    @keyframes animate {\n      0%, 100% {\n        transform: translateY(0);\n      }\n      50% {\n        transform: translateY(-10px);\n      }\n    }\n\n    @media(max-width: 707px){\n        .wave-container{\n            &:after{\n                // display: none;\n                height: 4%;\n            }\n        }\n\n        .wave{\n            &#wave3{\n                opacity: 0.4;\n                bottom: 9px;\n            }\n        }\n    }\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}