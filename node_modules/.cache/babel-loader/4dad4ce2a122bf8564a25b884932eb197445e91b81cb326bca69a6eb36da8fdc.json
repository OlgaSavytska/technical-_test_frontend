{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nexport default {\n  name: 'GeometryScene',\n  props: {\n    pageParams: {\n      type: Number,\n      default: null\n    }\n  },\n  data() {\n    return {\n      openQuiz: false,\n      scene: null,\n      camera: null,\n      renderer: null,\n      squares: [],\n      shapes: []\n    };\n  },\n  mounted() {\n    this.initScene();\n    this.initBackground();\n    this.initFallingShapes();\n    this.animate();\n    window.addEventListener('resize', this.handleResize);\n    this.handleResize();\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  watch: {\n    pageParams(val) {\n      console.log(\"O\", val);\n      // this.initScene();\n      // this.initBackground();\n      // this.initFallingShapes();\n      // this.animate();\n      // this.handleResize()\n    }\n  },\n  methods: {\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(this.renderer.domElement);\n      this.camera.position.z = 0.4;\n    },\n    initBackground() {\n      const backgroundColor = new THREE.Color(0xF3F6F4);\n      const backgroundGeometry = new THREE.PlaneGeometry(1000, 1000);\n      const backgroundMaterial = new THREE.MeshBasicMaterial({\n        color: backgroundColor,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.2\n      });\n      const backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n      this.scene.add(backgroundPlane);\n    },\n    initFallingShapes() {\n      const shapeCount = 78;\n      let box = new THREE.BoxGeometry(1, 1, 1);\n      const geometries = [new THREE.TetrahedronGeometry(1), box.scale(1, 0.5, 1), new THREE.ConeGeometry(1, 1, 32), new THREE.OctahedronGeometry(1)];\n      for (let i = 0; i < shapeCount; i++) {\n        const randomGeometry = geometries[Math.floor(Math.random() * geometries.length)];\n        const material = new THREE.MeshBasicMaterial({\n          color: new THREE.Color(Math.random(), Math.random(), Math.random())\n        });\n        const wireframeMaterial = new THREE.MeshBasicMaterial({\n          color: 0x000000,\n          wireframe: true\n        });\n        const wireframe = new THREE.LineSegments(new THREE.WireframeGeometry(randomGeometry), wireframeMaterial);\n        const shape = new THREE.Mesh(randomGeometry, material);\n        shape.position.set((Math.random() - 0.5) * 20, Math.random() * 10, (Math.random() - 0.5) * 20);\n        wireframe.position.copy(shape.position);\n        this.shapes.push({\n          shape,\n          wireframe\n        });\n        this.scene.add(shape, wireframe);\n      }\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      this.shapes.forEach(({\n        shape,\n        wireframe\n      }) => {\n        shape.position.y -= 0.005;\n        wireframe.position.y = shape.position.y;\n        if (shape.position.y < -5) {\n          shape.position.y = 10;\n          wireframe.position.y = 10;\n        }\n      });\n      this.renderer.render(this.scene, this.camera);\n    },\n    handleResize() {\n      console.log(\"P\", this.pageParams);\n      // if (!this.pageParams){\n      //     this.handleResize()\n      // }\n      // if (this.camera){\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      // const pageHeight = this.$refs.page.$el.getBoundingClientRect().height / 2\n      // let u = this.pageParams\n      this.renderer.setSize(window.innerWidth, window.innerHeight + this.pageParams);\n      // } else {\n      // this.renderer.setSize(window.innerWidth, window.innerHeight + 1000); \n      // this.handleResize() \n      this.initFallingShapes();\n      // }\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","props","pageParams","type","Number","default","data","openQuiz","scene","camera","renderer","squares","shapes","mounted","initScene","initBackground","initFallingShapes","animate","window","addEventListener","handleResize","beforeDestroy","removeEventListener","watch","val","console","log","methods","Scene","PerspectiveCamera","innerWidth","innerHeight","WebGLRenderer","setSize","document","body","appendChild","domElement","position","z","backgroundColor","Color","backgroundGeometry","PlaneGeometry","backgroundMaterial","MeshBasicMaterial","color","side","DoubleSide","transparent","opacity","backgroundPlane","Mesh","add","shapeCount","box","BoxGeometry","geometries","TetrahedronGeometry","scale","ConeGeometry","OctahedronGeometry","i","randomGeometry","Math","floor","random","length","material","wireframeMaterial","wireframe","LineSegments","WireframeGeometry","shape","set","copy","push","requestAnimationFrame","forEach","y","render","aspect","updateProjectionMatrix"],"sources":["src/components/QuizPageComponents/GeometryScene.vue"],"sourcesContent":["<template>\n    <div>\n        <div ref=\"scene\"></div>\n    </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default{\n    name: 'GeometryScene',\n\n    props: {\n        pageParams: {\n            type: Number,\n            default: null\n        }\n    },\n\n    data(){\n        return{\n            openQuiz: false,\n            scene: null,\n            camera: null,\n            renderer: null,\n            squares: [],\n            shapes: []\n        }\n    },\n\n    mounted(){\n        this.initScene();\n        this.initBackground();\n        this.initFallingShapes();\n        this.animate();\n\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize()\n    },\n\n    beforeDestroy() {\n        window.removeEventListener('resize', this.handleResize);\n    },\n\n    watch: {\n        pageParams(val){\n            console.log(\"O\", val)\n            // this.initScene();\n            // this.initBackground();\n            // this.initFallingShapes();\n            // this.animate();\n            // this.handleResize()\n        }\n    },\n\n    methods: {\n        initScene() {\n            this.scene = new THREE.Scene();\n            this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n            this.renderer = new THREE.WebGLRenderer();\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n            document.body.appendChild(this.renderer.domElement);\n            this.camera.position.z = 0.4;\n        },\n\n        initBackground() {\n            const backgroundColor = new THREE.Color(0xF3F6F4);\n            const backgroundGeometry = new THREE.PlaneGeometry(1000, 1000);\n            const backgroundMaterial = new THREE.MeshBasicMaterial({ color: backgroundColor, side: THREE.DoubleSide, transparent: true, opacity: 0.2 });\n            const backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n            this.scene.add(backgroundPlane);\n        },\n\n        initFallingShapes() {\n            const shapeCount = 78;\n\n            let box = new THREE.BoxGeometry(1, 1, 1)\n\n            const geometries = [\n                new THREE.TetrahedronGeometry(1),\n                box.scale(1, 0.5, 1),\n                new THREE.ConeGeometry(1, 1, 32),\n                new THREE.OctahedronGeometry(1),\n            ];\n\n            for (let i = 0; i < shapeCount; i++) {\n                const randomGeometry = geometries[Math.floor(Math.random() * geometries.length)];\n                const material = new THREE.MeshBasicMaterial({ color: new THREE.Color(Math.random(), Math.random(), Math.random()) });\n                \n                \n                const wireframeMaterial = new THREE.MeshBasicMaterial({ color: 0x000000, wireframe: true });\n                const wireframe = new THREE.LineSegments(new THREE.WireframeGeometry(randomGeometry), wireframeMaterial);\n                \n                const shape = new THREE.Mesh(randomGeometry, material);\n                \n                shape.position.set(\n                (Math.random() - 0.5) * 20,\n                Math.random() * 10,\n                (Math.random() - 0.5) * 20\n                );\n                wireframe.position.copy(shape.position);\n\n                this.shapes.push({ shape, wireframe });\n                this.scene.add(shape, wireframe);\n            }\n        },\n\n        animate() {\n            requestAnimationFrame(this.animate);\n\n            this.shapes.forEach(({ shape, wireframe }) => {\n                shape.position.y -= 0.005;\n                wireframe.position.y = shape.position.y;\n                if (shape.position.y < -5) {\n                shape.position.y = 10;\n                wireframe.position.y = 10;\n                }\n            });\n\n            this.renderer.render(this.scene, this.camera);\n        },\n\n        handleResize() {\n            console.log(\"P\", this.pageParams)\n            // if (!this.pageParams){\n            //     this.handleResize()\n            // }\n            // if (this.camera){\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n            this.camera.updateProjectionMatrix();\n            // const pageHeight = this.$refs.page.$el.getBoundingClientRect().height / 2\n                // let u = this.pageParams\n            this.renderer.setSize(window.innerWidth, window.innerHeight + this.pageParams)\n            // } else {\n                // this.renderer.setSize(window.innerWidth, window.innerHeight + 1000); \n                // this.handleResize() \n            this.initFallingShapes()\n            // }\n        }\n    }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}