{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nexport default {\n  name: 'GeometryScene',\n  data() {\n    return {\n      openQuiz: false,\n      scene: null,\n      camera: null,\n      renderer: null,\n      squares: [],\n      shapes: []\n    };\n  },\n  mounted() {\n    this.initScene();\n    this.initBackground();\n    this.initFallingShapes();\n    this.animate();\n    window.addEventListener('resize', this.handleResize);\n    this.handleResize();\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(this.renderer.domElement);\n      this.camera.position.z = 0.4;\n    },\n    initBackground() {\n      const backgroundColor = new THREE.Color(0xF3F6F4);\n      const backgroundGeometry = new THREE.PlaneGeometry(1000, 1000);\n      const backgroundMaterial = new THREE.MeshBasicMaterial({\n        color: backgroundColor,\n        side: THREE.DoubleSide,\n        transparent: true,\n        opacity: 0.2\n      });\n      const backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n      this.scene.add(backgroundPlane);\n    },\n    initFallingShapes() {\n      const shapeCount = 78;\n      let box = new THREE.BoxGeometry(1, 1, 1);\n      const geometries = [new THREE.TetrahedronGeometry(1), box.scale(1, 0.5, 1), new THREE.ConeGeometry(1, 1, 32), new THREE.OctahedronGeometry(1)];\n      for (let i = 0; i < shapeCount; i++) {\n        const randomGeometry = geometries[Math.floor(Math.random() * geometries.length)];\n        const material = new THREE.MeshBasicMaterial({\n          color: new THREE.Color(Math.random(), Math.random(), Math.random())\n        });\n        const wireframeMaterial = new THREE.MeshBasicMaterial({\n          color: 0x000000,\n          wireframe: true\n        });\n        const wireframe = new THREE.LineSegments(new THREE.WireframeGeometry(randomGeometry), wireframeMaterial);\n        const shape = new THREE.Mesh(randomGeometry, material);\n        shape.position.set((Math.random() - 0.5) * 20, Math.random() * 10, (Math.random() - 0.5) * 20);\n        wireframe.position.copy(shape.position);\n        this.shapes.push({\n          shape,\n          wireframe\n        });\n        this.scene.add(shape, wireframe);\n      }\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      this.shapes.forEach(({\n        shape,\n        wireframe\n      }) => {\n        shape.position.y -= 0.005;\n        wireframe.position.y = shape.position.y;\n        if (shape.position.y < -5) {\n          shape.position.y = 10;\n          wireframe.position.y = 10;\n        }\n      });\n      this.renderer.render(this.scene, this.camera);\n    },\n    handleResize() {\n      console.log(\"P\", this.camera.aspect);\n      // if (this.camera){\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      const pageHeight = this.$refs.page.$el.getBoundingClientRect().height / 2;\n      this.renderer.setSize(window.innerWidth, window.innerHeight + pageHeight);\n      // } else {\n      //     this.renderer.setSize(window.innerWidth, window.innerHeight + 1000); \n      // this.handleResize() \n      this.initFallingShapes();\n      // }\n    }\n  }\n};","map":{"version":3,"names":["THREE","name","data","openQuiz","scene","camera","renderer","squares","shapes","mounted","initScene","initBackground","initFallingShapes","animate","window","addEventListener","handleResize","beforeDestroy","removeEventListener","methods","Scene","PerspectiveCamera","innerWidth","innerHeight","WebGLRenderer","setSize","document","body","appendChild","domElement","position","z","backgroundColor","Color","backgroundGeometry","PlaneGeometry","backgroundMaterial","MeshBasicMaterial","color","side","DoubleSide","transparent","opacity","backgroundPlane","Mesh","add","shapeCount","box","BoxGeometry","geometries","TetrahedronGeometry","scale","ConeGeometry","OctahedronGeometry","i","randomGeometry","Math","floor","random","length","material","wireframeMaterial","wireframe","LineSegments","WireframeGeometry","shape","set","copy","push","requestAnimationFrame","forEach","y","render","console","log","aspect","updateProjectionMatrix","pageHeight","$refs","page","$el","getBoundingClientRect","height"],"sources":["src/components/QuizPageComponents/GeometryScene.vue"],"sourcesContent":["<template>\n    <div>\n        <div ref=\"scene\"></div>\n    </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default{\n    name: 'GeometryScene',\n\n    data(){\n        return{\n            openQuiz: false,\n            scene: null,\n            camera: null,\n            renderer: null,\n            squares: [],\n            shapes: []\n        }\n    },\n\n    mounted(){\n        this.initScene();\n        this.initBackground();\n        this.initFallingShapes();\n        this.animate();\n\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize()\n    \n    },\n\n    beforeDestroy() {\n        window.removeEventListener('resize', this.handleResize);\n    },\n\n    methods: {\n        initScene() {\n            this.scene = new THREE.Scene();\n            this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n            this.renderer = new THREE.WebGLRenderer();\n            this.renderer.setSize(window.innerWidth, window.innerHeight);\n            document.body.appendChild(this.renderer.domElement);\n            this.camera.position.z = 0.4;\n        },\n\n        initBackground() {\n            const backgroundColor = new THREE.Color(0xF3F6F4);\n            const backgroundGeometry = new THREE.PlaneGeometry(1000, 1000);\n            const backgroundMaterial = new THREE.MeshBasicMaterial({ color: backgroundColor, side: THREE.DoubleSide, transparent: true, opacity: 0.2 });\n            const backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n            this.scene.add(backgroundPlane);\n        },\n\n        initFallingShapes() {\n            const shapeCount = 78;\n\n            let box = new THREE.BoxGeometry(1, 1, 1)\n\n            const geometries = [\n                new THREE.TetrahedronGeometry(1),\n                box.scale(1, 0.5, 1),\n                new THREE.ConeGeometry(1, 1, 32),\n                new THREE.OctahedronGeometry(1),\n            ];\n\n            for (let i = 0; i < shapeCount; i++) {\n                const randomGeometry = geometries[Math.floor(Math.random() * geometries.length)];\n                const material = new THREE.MeshBasicMaterial({ color: new THREE.Color(Math.random(), Math.random(), Math.random()) });\n                \n                \n                const wireframeMaterial = new THREE.MeshBasicMaterial({ color: 0x000000, wireframe: true });\n                const wireframe = new THREE.LineSegments(new THREE.WireframeGeometry(randomGeometry), wireframeMaterial);\n                \n                const shape = new THREE.Mesh(randomGeometry, material);\n                \n                shape.position.set(\n                (Math.random() - 0.5) * 20,\n                Math.random() * 10,\n                (Math.random() - 0.5) * 20\n                );\n                wireframe.position.copy(shape.position);\n\n                this.shapes.push({ shape, wireframe });\n                this.scene.add(shape, wireframe);\n            }\n        },\n\n        animate() {\n            requestAnimationFrame(this.animate);\n\n            this.shapes.forEach(({ shape, wireframe }) => {\n                shape.position.y -= 0.005;\n                wireframe.position.y = shape.position.y;\n                if (shape.position.y < -5) {\n                shape.position.y = 10;\n                wireframe.position.y = 10;\n                }\n            });\n\n            this.renderer.render(this.scene, this.camera);\n        },\n\n        handleResize() {\n            console.log(\"P\", this.camera.aspect)\n            // if (this.camera){\n            this.camera.aspect = window.innerWidth / window.innerHeight;\n            this.camera.updateProjectionMatrix();\n            const pageHeight = this.$refs.page.$el.getBoundingClientRect().height / 2\n\n            this.renderer.setSize(window.innerWidth, window.innerHeight + pageHeight);\n            // } else {\n            //     this.renderer.setSize(window.innerWidth, window.innerHeight + 1000); \n                // this.handleResize() \n            this.initFallingShapes()\n            // }\n        }\n    }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}