{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nexport default {\n  name: 'GeometryScene',\n  data() {\n    return {\n      openQuiz: false,\n      scene: null,\n      camera: null,\n      renderer: null,\n      squares: [],\n      shapes: []\n    };\n  },\n  mounted() {\n    this.initScene();\n    this.initBackground();\n    // this.initFallingShapes();\n    this.animate();\n\n    // window.addEventListener('resize', this.handleResize);\n    this.handleResize();\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  initScene() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(this.renderer.domElement);\n    this.camera.position.z = 0.4;\n  },\n  initBackground() {\n    const backgroundColor = new THREE.Color(0xF3F6F4);\n    const backgroundGeometry = new THREE.PlaneGeometry(1000, 1000);\n    const backgroundMaterial = new THREE.MeshBasicMaterial({\n      color: backgroundColor,\n      side: THREE.DoubleSide,\n      transparent: true,\n      opacity: 0.2\n    });\n    const backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n    this.scene.add(backgroundPlane);\n  },\n  initFallingShapes() {\n    const shapeCount = 78;\n    let box = new THREE.BoxGeometry(1, 1, 1);\n    const geometries = [new THREE.TetrahedronGeometry(1), box.scale(1, 0.5, 1), new THREE.ConeGeometry(1, 1, 32), new THREE.OctahedronGeometry(1)];\n    for (let i = 0; i < shapeCount; i++) {\n      const randomGeometry = geometries[Math.floor(Math.random() * geometries.length)];\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color(Math.random(), Math.random(), Math.random())\n      });\n      const wireframeMaterial = new THREE.MeshBasicMaterial({\n        color: 0x000000,\n        wireframe: true\n      });\n      const wireframe = new THREE.LineSegments(new THREE.WireframeGeometry(randomGeometry), wireframeMaterial);\n      const shape = new THREE.Mesh(randomGeometry, material);\n      shape.position.set((Math.random() - 0.5) * 20, Math.random() * 10, (Math.random() - 0.5) * 20);\n      wireframe.position.copy(shape.position);\n      this.shapes.push({\n        shape,\n        wireframe\n      });\n      this.scene.add(shape, wireframe);\n    }\n  },\n  animate() {\n    requestAnimationFrame(this.animate);\n    this.shapes.forEach(({\n      shape,\n      wireframe\n    }) => {\n      shape.position.y -= 0.005;\n      wireframe.position.y = shape.position.y;\n      if (shape.position.y < -5) {\n        shape.position.y = 10;\n        wireframe.position.y = 10;\n      }\n    });\n    this.renderer.render(this.scene, this.camera);\n  },\n  handleResize() {\n    console.log(\"P\", this.camera.aspect);\n    // if (this.camera){\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    const pageHeight = this.$refs.page.$el.getBoundingClientRect().height / 2;\n    this.renderer.setSize(window.innerWidth, window.innerHeight + pageHeight);\n    // } else {\n    //     this.renderer.setSize(window.innerWidth, window.innerHeight + 1000); \n    // this.handleResize() \n    this.initFallingShapes();\n    // }\n  }\n};","map":{"version":3,"names":["THREE","name","data","openQuiz","scene","camera","renderer","squares","shapes","mounted","initScene","initBackground","animate","handleResize","beforeDestroy","window","removeEventListener","Scene","PerspectiveCamera","innerWidth","innerHeight","WebGLRenderer","setSize","document","body","appendChild","domElement","position","z","backgroundColor","Color","backgroundGeometry","PlaneGeometry","backgroundMaterial","MeshBasicMaterial","color","side","DoubleSide","transparent","opacity","backgroundPlane","Mesh","add","initFallingShapes","shapeCount","box","BoxGeometry","geometries","TetrahedronGeometry","scale","ConeGeometry","OctahedronGeometry","i","randomGeometry","Math","floor","random","length","material","wireframeMaterial","wireframe","LineSegments","WireframeGeometry","shape","set","copy","push","requestAnimationFrame","forEach","y","render","console","log","aspect","updateProjectionMatrix","pageHeight","$refs","page","$el","getBoundingClientRect","height"],"sources":["src/components/QuizPageComponents/GeometryScene.vue"],"sourcesContent":["<template>\n    <div>\n        <div ref=\"scene\"></div>\n    </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default{\n    name: 'GeometryScene',\n\n    data(){\n        return{\n            openQuiz: false,\n            scene: null,\n            camera: null,\n            renderer: null,\n            squares: [],\n            shapes: []\n        }\n    },\n\n    mounted(){\n        this.initScene();\n        this.initBackground();\n        // this.initFallingShapes();\n        this.animate();\n\n        // window.addEventListener('resize', this.handleResize);\n        this.handleResize()\n    \n    },\n\n    beforeDestroy() {\n        window.removeEventListener('resize', this.handleResize);\n    },\n\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(this.renderer.domElement);\n      this.camera.position.z = 0.4;\n    },\n\n    initBackground() {\n      const backgroundColor = new THREE.Color(0xF3F6F4);\n      const backgroundGeometry = new THREE.PlaneGeometry(1000, 1000);\n      const backgroundMaterial = new THREE.MeshBasicMaterial({ color: backgroundColor, side: THREE.DoubleSide, transparent: true, opacity: 0.2 });\n      const backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n      this.scene.add(backgroundPlane);\n    },\n\n    initFallingShapes() {\n      const shapeCount = 78;\n\n      let box = new THREE.BoxGeometry(1, 1, 1)\n\n      const geometries = [\n        new THREE.TetrahedronGeometry(1),\n        box.scale(1, 0.5, 1),\n        new THREE.ConeGeometry(1, 1, 32),\n        new THREE.OctahedronGeometry(1),\n      ];\n\n      for (let i = 0; i < shapeCount; i++) {\n        const randomGeometry = geometries[Math.floor(Math.random() * geometries.length)];\n        const material = new THREE.MeshBasicMaterial({ color: new THREE.Color(Math.random(), Math.random(), Math.random()) });\n        \n        \n        const wireframeMaterial = new THREE.MeshBasicMaterial({ color: 0x000000, wireframe: true });\n        const wireframe = new THREE.LineSegments(new THREE.WireframeGeometry(randomGeometry), wireframeMaterial);\n        \n        const shape = new THREE.Mesh(randomGeometry, material);\n        \n        shape.position.set(\n          (Math.random() - 0.5) * 20,\n          Math.random() * 10,\n          (Math.random() - 0.5) * 20\n        );\n        wireframe.position.copy(shape.position);\n\n        this.shapes.push({ shape, wireframe });\n        this.scene.add(shape, wireframe);\n      }\n    },\n\n    animate() {\n      requestAnimationFrame(this.animate);\n\n      this.shapes.forEach(({ shape, wireframe }) => {\n        shape.position.y -= 0.005;\n        wireframe.position.y = shape.position.y;\n        if (shape.position.y < -5) {\n          shape.position.y = 10;\n          wireframe.position.y = 10;\n        }\n      });\n\n      this.renderer.render(this.scene, this.camera);\n    },\n\n    handleResize() {\n        console.log(\"P\", this.camera.aspect)\n        // if (this.camera){\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        const pageHeight = this.$refs.page.$el.getBoundingClientRect().height / 2\n\n        this.renderer.setSize(window.innerWidth, window.innerHeight + pageHeight);\n        // } else {\n        //     this.renderer.setSize(window.innerWidth, window.innerHeight + 1000); \n            // this.handleResize() \n        this.initFallingShapes()\n        // }\n      \n    },\n}\n</script>"],"mappings":";AAOA,YAAAA,KAAA;AAEA;EACAC,IAAA;EAEAC,KAAA;IACA;MACAC,QAAA;MACAC,KAAA;MACAC,MAAA;MACAC,QAAA;MACAC,OAAA;MACAC,MAAA;IACA;EACA;EAEAC,QAAA;IACA,KAAAC,SAAA;IACA,KAAAC,cAAA;IACA;IACA,KAAAC,OAAA;;IAEA;IACA,KAAAC,YAAA;EAEA;EAEAC,cAAA;IACAC,MAAA,CAAAC,mBAAA,gBAAAH,YAAA;EACA;EAEAH,UAAA;IACA,KAAAN,KAAA,OAAAJ,KAAA,CAAAiB,KAAA;IACA,KAAAZ,MAAA,OAAAL,KAAA,CAAAkB,iBAAA,KAAAH,MAAA,CAAAI,UAAA,GAAAJ,MAAA,CAAAK,WAAA;IACA,KAAAd,QAAA,OAAAN,KAAA,CAAAqB,aAAA;IACA,KAAAf,QAAA,CAAAgB,OAAA,CAAAP,MAAA,CAAAI,UAAA,EAAAJ,MAAA,CAAAK,WAAA;IACAG,QAAA,CAAAC,IAAA,CAAAC,WAAA,MAAAnB,QAAA,CAAAoB,UAAA;IACA,KAAArB,MAAA,CAAAsB,QAAA,CAAAC,CAAA;EACA;EAEAjB,eAAA;IACA,MAAAkB,eAAA,OAAA7B,KAAA,CAAA8B,KAAA;IACA,MAAAC,kBAAA,OAAA/B,KAAA,CAAAgC,aAAA;IACA,MAAAC,kBAAA,OAAAjC,KAAA,CAAAkC,iBAAA;MAAAC,KAAA,EAAAN,eAAA;MAAAO,IAAA,EAAApC,KAAA,CAAAqC,UAAA;MAAAC,WAAA;MAAAC,OAAA;IAAA;IACA,MAAAC,eAAA,OAAAxC,KAAA,CAAAyC,IAAA,CAAAV,kBAAA,EAAAE,kBAAA;IACA,KAAA7B,KAAA,CAAAsC,GAAA,CAAAF,eAAA;EACA;EAEAG,kBAAA;IACA,MAAAC,UAAA;IAEA,IAAAC,GAAA,OAAA7C,KAAA,CAAA8C,WAAA;IAEA,MAAAC,UAAA,IACA,IAAA/C,KAAA,CAAAgD,mBAAA,KACAH,GAAA,CAAAI,KAAA,aACA,IAAAjD,KAAA,CAAAkD,YAAA,YACA,IAAAlD,KAAA,CAAAmD,kBAAA,IACA;IAEA,SAAAC,CAAA,MAAAA,CAAA,GAAAR,UAAA,EAAAQ,CAAA;MACA,MAAAC,cAAA,GAAAN,UAAA,CAAAO,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,MAAA,KAAAT,UAAA,CAAAU,MAAA;MACA,MAAAC,QAAA,OAAA1D,KAAA,CAAAkC,iBAAA;QAAAC,KAAA,MAAAnC,KAAA,CAAA8B,KAAA,CAAAwB,IAAA,CAAAE,MAAA,IAAAF,IAAA,CAAAE,MAAA,IAAAF,IAAA,CAAAE,MAAA;MAAA;MAGA,MAAAG,iBAAA,OAAA3D,KAAA,CAAAkC,iBAAA;QAAAC,KAAA;QAAAyB,SAAA;MAAA;MACA,MAAAA,SAAA,OAAA5D,KAAA,CAAA6D,YAAA,KAAA7D,KAAA,CAAA8D,iBAAA,CAAAT,cAAA,GAAAM,iBAAA;MAEA,MAAAI,KAAA,OAAA/D,KAAA,CAAAyC,IAAA,CAAAY,cAAA,EAAAK,QAAA;MAEAK,KAAA,CAAApC,QAAA,CAAAqC,GAAA,CACA,CAAAV,IAAA,CAAAE,MAAA,gBACAF,IAAA,CAAAE,MAAA,SACA,CAAAF,IAAA,CAAAE,MAAA,cACA;MACAI,SAAA,CAAAjC,QAAA,CAAAsC,IAAA,CAAAF,KAAA,CAAApC,QAAA;MAEA,KAAAnB,MAAA,CAAA0D,IAAA;QAAAH,KAAA;QAAAH;MAAA;MACA,KAAAxD,KAAA,CAAAsC,GAAA,CAAAqB,KAAA,EAAAH,SAAA;IACA;EACA;EAEAhD,QAAA;IACAuD,qBAAA,MAAAvD,OAAA;IAEA,KAAAJ,MAAA,CAAA4D,OAAA;MAAAL,KAAA;MAAAH;IAAA;MACAG,KAAA,CAAApC,QAAA,CAAA0C,CAAA;MACAT,SAAA,CAAAjC,QAAA,CAAA0C,CAAA,GAAAN,KAAA,CAAApC,QAAA,CAAA0C,CAAA;MACA,IAAAN,KAAA,CAAApC,QAAA,CAAA0C,CAAA;QACAN,KAAA,CAAApC,QAAA,CAAA0C,CAAA;QACAT,SAAA,CAAAjC,QAAA,CAAA0C,CAAA;MACA;IACA;IAEA,KAAA/D,QAAA,CAAAgE,MAAA,MAAAlE,KAAA,OAAAC,MAAA;EACA;EAEAQ,aAAA;IACA0D,OAAA,CAAAC,GAAA,WAAAnE,MAAA,CAAAoE,MAAA;IACA;IACA,KAAApE,MAAA,CAAAoE,MAAA,GAAA1D,MAAA,CAAAI,UAAA,GAAAJ,MAAA,CAAAK,WAAA;IACA,KAAAf,MAAA,CAAAqE,sBAAA;IACA,MAAAC,UAAA,QAAAC,KAAA,CAAAC,IAAA,CAAAC,GAAA,CAAAC,qBAAA,GAAAC,MAAA;IAEA,KAAA1E,QAAA,CAAAgB,OAAA,CAAAP,MAAA,CAAAI,UAAA,EAAAJ,MAAA,CAAAK,WAAA,GAAAuD,UAAA;IACA;IACA;IACA;IACA,KAAAhC,iBAAA;IACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}