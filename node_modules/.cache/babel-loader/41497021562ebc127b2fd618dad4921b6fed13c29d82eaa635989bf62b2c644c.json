{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as THREE from 'three';\nexport default {\n  name: 'GeometryScene',\n  data() {\n    return {\n      openQuiz: false,\n      scene: null,\n      camera: null,\n      renderer: null,\n      squares: [],\n      shapes: []\n    };\n  },\n  mounted() {\n    this.initScene();\n    this.initBackground();\n    this.initFallingShapes();\n    this.animate();\n    window.addEventListener('resize', this.handleResize);\n    this.handleResize();\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  initScene() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(this.renderer.domElement);\n    this.camera.position.z = 0.4;\n  },\n  initBackground() {\n    const backgroundColor = new THREE.Color(0xF3F6F4);\n    const backgroundGeometry = new THREE.PlaneGeometry(1000, 1000);\n    const backgroundMaterial = new THREE.MeshBasicMaterial({\n      color: backgroundColor,\n      side: THREE.DoubleSide,\n      transparent: true,\n      opacity: 0.2\n    });\n    const backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n    this.scene.add(backgroundPlane);\n  },\n  initFallingShapes() {\n    const shapeCount = 78;\n    let box = new THREE.BoxGeometry(1, 1, 1);\n    const geometries = [new THREE.TetrahedronGeometry(1), box.scale(1, 0.5, 1), new THREE.ConeGeometry(1, 1, 32), new THREE.OctahedronGeometry(1)];\n    for (let i = 0; i < shapeCount; i++) {\n      const randomGeometry = geometries[Math.floor(Math.random() * geometries.length)];\n      const material = new THREE.MeshBasicMaterial({\n        color: new THREE.Color(Math.random(), Math.random(), Math.random())\n      });\n      const wireframeMaterial = new THREE.MeshBasicMaterial({\n        color: 0x000000,\n        wireframe: true\n      });\n      const wireframe = new THREE.LineSegments(new THREE.WireframeGeometry(randomGeometry), wireframeMaterial);\n      const shape = new THREE.Mesh(randomGeometry, material);\n      shape.position.set((Math.random() - 0.5) * 20, Math.random() * 10, (Math.random() - 0.5) * 20);\n      wireframe.position.copy(shape.position);\n      this.shapes.push({\n        shape,\n        wireframe\n      });\n      this.scene.add(shape, wireframe);\n    }\n  },\n  animate() {\n    requestAnimationFrame(this.animate);\n    this.shapes.forEach(({\n      shape,\n      wireframe\n    }) => {\n      shape.position.y -= 0.005;\n      wireframe.position.y = shape.position.y;\n      if (shape.position.y < -5) {\n        shape.position.y = 10;\n        wireframe.position.y = 10;\n      }\n    });\n    this.renderer.render(this.scene, this.camera);\n  },\n  handleResize() {\n    console.log(\"P\", this.camera.aspect);\n    // if (this.camera){\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    const pageHeight = this.$refs.page.$el.getBoundingClientRect().height / 2;\n    this.renderer.setSize(window.innerWidth, window.innerHeight + pageHeight);\n    // } else {\n    //     this.renderer.setSize(window.innerWidth, window.innerHeight + 1000); \n    // this.handleResize() \n    this.initFallingShapes();\n    // }\n  }\n};","map":{"version":3,"names":["THREE","name","data","openQuiz","scene","camera","renderer","squares","shapes","mounted","initScene","initBackground","initFallingShapes","animate","window","addEventListener","handleResize","beforeDestroy","removeEventListener","Scene","PerspectiveCamera","innerWidth","innerHeight","WebGLRenderer","setSize","document","body","appendChild","domElement","position","z","backgroundColor","Color","backgroundGeometry","PlaneGeometry","backgroundMaterial","MeshBasicMaterial","color","side","DoubleSide","transparent","opacity","backgroundPlane","Mesh","add","shapeCount","box","BoxGeometry","geometries","TetrahedronGeometry","scale","ConeGeometry","OctahedronGeometry","i","randomGeometry","Math","floor","random","length","material","wireframeMaterial","wireframe","LineSegments","WireframeGeometry","shape","set","copy","push","requestAnimationFrame","forEach","y","render","console","log","aspect","updateProjectionMatrix","pageHeight","$refs","page","$el","getBoundingClientRect","height"],"sources":["src/components/QuizPageComponents/GeometryScene.vue"],"sourcesContent":["<template>\n    <div>\n        <div ref=\"scene\"></div>\n    </div>\n</template>\n\n<script>\nimport * as THREE from 'three';\n\nexport default{\n    name: 'GeometryScene',\n\n    data(){\n        return{\n            openQuiz: false,\n            scene: null,\n            camera: null,\n            renderer: null,\n            squares: [],\n            shapes: []\n        }\n    },\n\n    mounted(){\n        this.initScene();\n        this.initBackground();\n        this.initFallingShapes();\n        this.animate();\n\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize()\n    \n    },\n\n    beforeDestroy() {\n        window.removeEventListener('resize', this.handleResize);\n    },\n\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 100);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      document.body.appendChild(this.renderer.domElement);\n      this.camera.position.z = 0.4;\n    },\n\n    initBackground() {\n      const backgroundColor = new THREE.Color(0xF3F6F4);\n      const backgroundGeometry = new THREE.PlaneGeometry(1000, 1000);\n      const backgroundMaterial = new THREE.MeshBasicMaterial({ color: backgroundColor, side: THREE.DoubleSide, transparent: true, opacity: 0.2 });\n      const backgroundPlane = new THREE.Mesh(backgroundGeometry, backgroundMaterial);\n      this.scene.add(backgroundPlane);\n    },\n\n    initFallingShapes() {\n      const shapeCount = 78;\n\n      let box = new THREE.BoxGeometry(1, 1, 1)\n\n      const geometries = [\n        new THREE.TetrahedronGeometry(1),\n        box.scale(1, 0.5, 1),\n        new THREE.ConeGeometry(1, 1, 32),\n        new THREE.OctahedronGeometry(1),\n      ];\n\n      for (let i = 0; i < shapeCount; i++) {\n        const randomGeometry = geometries[Math.floor(Math.random() * geometries.length)];\n        const material = new THREE.MeshBasicMaterial({ color: new THREE.Color(Math.random(), Math.random(), Math.random()) });\n        \n        \n        const wireframeMaterial = new THREE.MeshBasicMaterial({ color: 0x000000, wireframe: true });\n        const wireframe = new THREE.LineSegments(new THREE.WireframeGeometry(randomGeometry), wireframeMaterial);\n        \n        const shape = new THREE.Mesh(randomGeometry, material);\n        \n        shape.position.set(\n          (Math.random() - 0.5) * 20,\n          Math.random() * 10,\n          (Math.random() - 0.5) * 20\n        );\n        wireframe.position.copy(shape.position);\n\n        this.shapes.push({ shape, wireframe });\n        this.scene.add(shape, wireframe);\n      }\n    },\n\n    animate() {\n      requestAnimationFrame(this.animate);\n\n      this.shapes.forEach(({ shape, wireframe }) => {\n        shape.position.y -= 0.005;\n        wireframe.position.y = shape.position.y;\n        if (shape.position.y < -5) {\n          shape.position.y = 10;\n          wireframe.position.y = 10;\n        }\n      });\n\n      this.renderer.render(this.scene, this.camera);\n    },\n\n    handleResize() {\n        console.log(\"P\", this.camera.aspect)\n        // if (this.camera){\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        const pageHeight = this.$refs.page.$el.getBoundingClientRect().height / 2\n\n        this.renderer.setSize(window.innerWidth, window.innerHeight + pageHeight);\n        // } else {\n        //     this.renderer.setSize(window.innerWidth, window.innerHeight + 1000); \n            // this.handleResize() \n        this.initFallingShapes()\n        // }\n      \n    },\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}